# Jetstream Build Script
#
# http://www.cmake.org/cmake/help/cmake_tutorial.html

cmake_minimum_required (VERSION 2.4)

set (CMAKE_VERBOSE_MAKEFILE ON)
set (BUILD_SHARED_LIBS ON)

# Add Compiler Definitions
#set (CMAKE_CXX_FLAGS "-g -O0 -Wall")
add_definitions ( -g -O0 -Wall -Werror )

set (TOP_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set (SRC_DIR ${TOP_DIR}/src)
set (BUILD_DIR ${TOP_DIR}/src)

set (TESTLIB "js_tests") #name for the library containing our unit tests

#######################################################
# Project flags

project (jetstream)

set (jetstream_VERSION_MAJOR "0" CACHE STRING "Jetstream's major version" FORCE)
set (jetstream_VERSION_MINOR "0" CACHE STRING "Jetstream's minor version" FORCE)
set (jetstream_VERSION_REVISION "1" CACHE STRING "Jetstream's revision version" FORCE)

set (jetstream_VERSION "${jetstream_VERSION_MAJOR}.${jetstream_VERSION_MINOR}.${jetstream_VERSION_REVISION}"  CACHE STRING "Jetstream's complete version"  FORCE)

# Generate a configuration file with these settings
configure_file (${SRC_DIR}/utils/js_version.h.in ${SRC_DIR}/utils/js_version.h)

#######################################################

# Requires Boost
find_package (Boost COMPONENTS system thread chrono REQUIRED) 
if (APPLE)
  set (Boost_USE_STATIC_LIBS ON)
  set (Boost_USE_MULTITHREADED ON) 
endif ()
include_directories (${Boost_INCLUDE_DIRS})

# Require ProtoBufs
include (FindProtobuf)
find_package (Protobuf REQUIRED)
include_directories (${PROTOBUF_INCLUDE_DIR})


# Require Google Test
include (FindGTest)
find_package (GTest REQUIRED)
include_directories (${GTEST_INCLUDE_DIR})

#######################################################
# Set library locations and sources

set (LIBRARY_NAME jsutils)
add_subdirectory (${SRC_DIR}/utils)
link_directories (${BUILD_DIR}/utils)
set (LIBRARIES ${LIBRARIES} ${LIBRARY_NAME})

include_directories (${SRC_DIR}/utils)

set (LIBRARY_NAME jsproto)
add_subdirectory (${SRC_DIR}/proto)
link_directories (${BUILD_DIR}/proto)
set (LIBRARIES ${LIBRARIES} ${LIBRARY_NAME})

include_directories (${SRC_DIR}/proto/cpp ${SRC_DIR}/cube ${SRC_DIR}/dataplane)

# Dependencies are tricky, because protobuf .h files autogenerated, so we need
#  to make sure it's built before other libraries which include it

set (LIBRARY_NAME jsdataplane)
add_subdirectory (${SRC_DIR}/dataplane)
add_dependencies (${LIBRARY_NAME} jsproto)
link_directories (${BUILD_DIR}/dataplane)
set (LIBRARIES ${LIBRARIES} ${LIBRARY_NAME})

#######################################################
# Build executables

set (LIBRARIES ${LIBRARIES}
    ${Boost_LIBRARIES}
    ${PROTOBUF_LIBRARY}
    ${GTEST_LIBRARY}
)

message ("GTest library: ${GTEST_LIBRARY}.  Include: ${GTEST_INCLUDE_DIR}")
message (STATUS "Linking libraries ${LIBRARIES}")

#set (JSNODED ${BUILD_DIR}/dataplane/jsnoded)
set (JSNODED jsnoded)

add_executable (${JSNODED} ${SRC_DIR}/dataplane/nodedataplane_daemon.cc)
add_dependencies (${JSNODED} jsproto) #A js-specific entry to add our protobuf generated code
target_link_libraries (${JSNODED} ${LIBRARIES})


###################################################
# Build the unit tests

file (GLOB_RECURSE TESTS RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "src/test_*.cc")

set (TESTS ${SRC_DIR}/js_unit_tests.cc ${TESTS})

add_executable (js_unit_tests ${TESTS})
target_link_libraries (js_unit_tests ${LIBRARIES})
target_link_libraries (js_unit_tests ${LIBRARY_NAME}) #the js node library


file (GLOB_RECURSE OPS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "src/*_operator.cc")
foreach(OP ${OPS})
  get_filename_component(OP_NAME ${OP} NAME_WE)
#  add_library (${OP_NAME} ${OP})
  target_link_libraries (js_unit_tests  ${OP_NAME})
endforeach(OP)


# install (TARGETS jetstream DESTINATION bin)
