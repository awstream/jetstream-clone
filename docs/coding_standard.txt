Astyle Options: -s2 --style=java --break-closing-brackets -C -S --break-blocks


- Maximum line length is 79 spaces

- Indent by two spaces. Use spaces, not tabs.

- Classes and Types use capitalized camelCase
- Variables use lower-case camelCase
- Function names use underscore

  class ServerMessage {
    ServerMsg get_message (int thisMsg);
  };

- Protobuf messages follow the Google-recommended style (see 
https://developers.google.com/protocol-buffers/docs/style).

  GOOD:  message SongServerRequest {
           required string song_name = 1;
         }
         enum Foo {
           FIRST_VALUE = 1;
           SECOND_VALUE = 2;
         }
 

- Open brace should be on the same line as the statements.  
- Space between if/else/while/do and open pare or open brace

  GOOD:  if (  ) {

  BAD:  if() {
  BAD:  if () 
    {

- Else on separate line
  
  GOOD:  }
         else {

  BAD:   } else {

- Single-line bodies on separate lines for conditions:

  GOOD:  if (x)
           body1;
         else
           body2

  BAD:   if (x) body1;
         else body2;

- Function type on same line as name for function declaration:
- Descriptive name for variable in function declaration:
- Notice space between declaration and variables

  GOOD:  int foo (int bar) {

- Function type on separate line in function definition:

  GOOD:  static int
         foo (int bar) {

- Space between type and pointer/reference in declaractions
  
  GOOD:  int foo (int *bar)
         int foo (int &bar)
         int *bar;
         int &bar;

  BAD:   int foo (int* bar)
         int* bar;
         int * bar;
         int& bar;
         int & bar;

- Close braces on separate lines:

  GOOD: if (x) {
          if (y) {
            body1;
            body2;
          }
        }

- Multi-line comments should use /* */ with close on separate line:

  GOOD:  /* Comment1
          * Comment2
          */


- File names:
  Headers end in .h and .cc, not .hh, .hpp, .cpp, or .C
  File names should use underscores where appropriate, not CamelCase

- White space around pointers and class functions: Don't do it!
  GOOD:  foo.bar()
         foo->bar()
  BAD:   foo . bar()
         foo -> bar ()

- Never use seconds for timeout, always use milliseconds or shorter.
- Also use defined native types for time, never 'ints':

  GOOD:  do_somethign(msec_t timeout);
  BAD:   do_somethign(int seconds);

- Namespaces:
  - Never include any namespaces in .h files
  - May/always include ::std, boost, and jetstream in .cc files
  

- Class inheritence:
  - Include space between ":" for child and parent

  GOOD:  class foo : public bar {
  BAD:   class foo: public bar {


- Naming for typedef'd callbacks:
  - Name as cb_<vague description of arguments>_t 

  GOOD:  typedef boost::function<void, int> cb_int_t
  
- Google unit test framework:
  - If you need to check a condition but still want subsequent (e.g. cleanup) code
  to execute, use an EXPECT_* assertion instead of ASSERT_*. The latter causes the
  current function to exit.
