This document describes the current vision for the high-level architecture of JetStream.

DEFINITIONS:

A query is a request by the user for a particular fact about a system. Queries are never standing. All query results must be present in some hypercube.

A computation is the process by which the system materializes data in hypercubes. A computation can be either standing or one-shot.

A task is the smallest unit of a computation that JetStream will explicitly place.

A source is a task that emits hypercubes.

An operator transforms one or more source hypercubes into a destination hypercube. Operators run on nodes.

A node is a computer on which JetStream can place sources or operators.



SEMANTICS:

JetStream exists to maintain views of changing data. Data will be structured as tables or hypercubes (THIS IS VAGUE SO FAR.)

Each hypercube exists on a particular node.

Nodes may periodically checkpoint the hypercubes. These can be stored on either local or shared storage.



RATIONALE:
Doing straight-ahead streaming of tuples seems to have miserable difficulties with failure recovery. Hypercubes make the state and buffering explicit. They also make time explicit.

Because time is part of the explicit state, the code to modify hypercubes and handle failures will no longer need to reason about ordering and time, greatly simplifying failure recovery. We may be able to avoid having any explicit recovery code -- just pour new data down the pipe and it'll get aggregated.


DIFFICULTIES:
Suppose we have a source, S1. and it's currently sending data to aggregation node A. And then A fails, and S1 fails over to aggregator B. How do we make sure that S1's input is counted exactly once?  Perhaps it's okay to keep linear state for "which nodes were included in this hypercube"?


