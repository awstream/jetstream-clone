package old_jetstream;

import "jetstream_types.proto";



/**
* A connection between two points in the computation graph.
* Operators must be in the same computation.
* Cubes are globally visible and are NOT tied to a computation.
*/
message Edge {
  required int32 src = 1;
  required int32 computation = 4; //which computation these operators are in

  optional int32 dest = 2;   //local dest
  optional string cube_name = 3;  //cube, local or remote
  optional NodeID dest_addr = 5;  //dest addr if remote
}

/**
* An AlterTopo specifies a set of mutations to the operator graph.
* It includes tasks and cubes to start, tasks and cubes to stop, 
* and edges to add. 
*/
message AlterTopo {
  repeated TaskMeta toStart = 1;
  repeated CubeMeta toCreate = 2;
  repeated TaskID taskToStop = 3; 
  repeated string cubesToStop = 4; 
  repeated Edge edges = 5;
}


/***
* A heartbeat is a message from the data plane to the server
*/
message Heartbeat {
  //SS: Consider including an explicit nodeID, in case heartbeats are aggregated/forwarded.
  //required NodeID nodeId = 16;
  required int32 freemem_mb = 17; //MB of free mem on node
  required int32 cpuload_pct = 18; //percentage of CPU resources that's free. 
}


/* An RPC request to a JetStream coordinator server.
* The type field specifies the type of request. The optional fields specify the
* parameters for that particular request type.
*
* TODO: should probably have IDs for requests so we can have multiple concurrent
* request/responses from a single client
*/
message ServerRequest {
  enum Type {NOOP = 1; GET_NODES = 2; DEPLOY = 3; COUNT_NODES = 4; HEARTBEAT = 5;}
  required Type type = 1;

  optional AlterTopo alter = 3;
  optional Heartbeat heartbeat = 4;
}


/* An RPC response from a JetStream coordinator server.
* Currently the only messages with responses are "get nodes" and "get 1 node".
* There is also an optional error message field.
*
* TODO: should probably have IDs for requests so we can have multiple concurrent
* request/responses from a single client
*/
message ServerResponse {
  optional string error = 147; //use unusual number to catch errors on parsing
  repeated NodeID nodes = 148; //in response to a get_nodes or get_node command

  optional int32 count_nodes = 149;
}
