package jetstream;

/**
* Identifies a single node (host).
* Bytes should be an IP4 or IP6 address
*/
message NodeID {
  required bytes address = 1;
  required int32 portno = 2;
}

/**
* A running task (aka operator). The computationID is globally
* unique within a particular JetStream cluster and identifies the computation or topology to which this task belongs. The task field is
* unique within a computation.
*/
message TaskID {
  required int32 computationID = 1;
  required int32 task = 2;
}

message Element {
  // Keep this type consistent with the optional fields below
  enum ElementType {STRING = 1; INT32 = 2; DOUBLE = 3; TIME=4;}
  optional string s_val = 1;
  optional int32 i_val = 2;
  optional double d_val = 3;
  optional int32 t_val = 4;
}

message Dimension {
  required string name = 1;
  required Element.ElementType type = 2;
  optional Element default_val = 3;
}

message TaskMeta {
  required string op_typename = 1; //type of operator. typically a classname. 
                                //Note that 'typename' is a C++ keyword.
  required TaskID id = 2;
  optional NodeID site = 3;

  message DictEntry {
    required string opt_name = 1;
    required string val = 2;
  }
  repeated DictEntry config= 4; //list of key-value pairs. 

  //TODO: Determine minimal set of attributes client must specify for submitted operators.
  // optional int32 partialAggRatio
  // optional boolean isUnion
}


message CubeSchema{
  message Dimension {
    required string name = 1;
    required Element.ElementType type = 2;
  }
  repeated Dimension dimensions = 1;

  message Aggregate {
    required string name = 1;
    required string type = 2; //class name of aggregate type;
  }
  repeated Aggregate aggregates = 2;
}


message CubeMeta {
  required string name = 1;
  required CubeSchema schema = 2;
  optional NodeID site = 3;
}

message Tuple {
 repeated Element e = 1;
}



/**
* A connection between two points in the computation graph.
* Operators must be in the same computation.
* Cubes are globally visible and are NOT tied to a computation.
*/
message Edge {
  required int32 src = 1;
  required int32 computation = 4; //which computation these operators are in

  optional int32 dest = 2;   //local dest
  optional string cube_name = 3;  //cube, local or remote
  optional NodeID dest_addr = 5;  //dest addr if remote
}

/**
* An AlterTopo specifies a set of mutations to the operator graph.
* It includes tasks and cubes to start, tasks and cubes to stop, 
* and edges to add. 
*/
message AlterTopo {
  repeated TaskMeta toStart = 1;
  repeated CubeMeta toCreate = 2;
  repeated TaskID taskToStop = 3; 
  repeated string cubesToStop = 4; 
  repeated Edge edges = 5;
}


/***
* A heartbeat is a message from the data plane to the server
*/
message Heartbeat {
  //SS: Consider including an explicit nodeID, in case heartbeats are aggregated/forwarded.
  //required NodeID nodeId = 16;
  required int32 freemem_mb = 17; //MB of free mem on node
  required int32 cpuload_pct = 18; //percentage of CPU resources that's free. 
}

message Error {
 required string error_msg = 1;
}

/*** A request to a JetStream coordinator server.
*
*
*/
message ControlMessage {
  enum ControlType { ERROR = 2; HEARTBEAT = 3; GET_NODE_LIST_REQ = 4; NODE_COUNT_REQ = 5; ALTER = 6; NODES_RESPONSE = 7;}
  required ControlType type = 1; 
  
  optional Error error_msg = 2;
  optional Heartbeat heartbeat = 3;
  optional int32 node_count = 5;
  optional AlterTopo alter = 6; 
  repeated NodeID nodes = 7;
   
}

/***
* "dataplane" message
*/ 
message DataplaneMessage {
  enum DataplaneType { ERROR = 2; DATA = 3; }
  required DataplaneType type  = 1;

  optional Error error_msg = 2;
  repeated Tuple data = 3;                // Streaming data on the data plane
}
