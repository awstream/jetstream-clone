// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jetstream_types.proto

#ifndef PROTOBUF_jetstream_5ftypes_2eproto__INCLUDED
#define PROTOBUF_jetstream_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace edu {
namespace princeton {
namespace jetstream {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_jetstream_5ftypes_2eproto();
void protobuf_AssignDesc_jetstream_5ftypes_2eproto();
void protobuf_ShutdownFile_jetstream_5ftypes_2eproto();

class NodeID;
class TaskID;
class TaskMeta;
class TableName;
class TableMeta;
class Edge;
class Table;
class Cube;

enum Table_Type {
  Table_Type_BYTES = 1,
  Table_Type_STRING = 2,
  Table_Type_INT32 = 3
};
bool Table_Type_IsValid(int value);
const Table_Type Table_Type_Type_MIN = Table_Type_BYTES;
const Table_Type Table_Type_Type_MAX = Table_Type_INT32;
const int Table_Type_Type_ARRAYSIZE = Table_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Table_Type_descriptor();
inline const ::std::string& Table_Type_Name(Table_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Table_Type_descriptor(), value);
}
inline bool Table_Type_Parse(
    const ::std::string& name, Table_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Table_Type>(
    Table_Type_descriptor(), name, value);
}
// ===================================================================

class NodeID : public ::google::protobuf::Message {
 public:
  NodeID();
  virtual ~NodeID();
  
  NodeID(const NodeID& from);
  
  inline NodeID& operator=(const NodeID& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeID& default_instance();
  
  void Swap(NodeID* other);
  
  // implements Message ----------------------------------------------
  
  NodeID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeID& from);
  void MergeFrom(const NodeID& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes address = 1;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 1;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const void* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  
  // required int32 portno = 2;
  inline bool has_portno() const;
  inline void clear_portno();
  static const int kPortnoFieldNumber = 2;
  inline ::google::protobuf::int32 portno() const;
  inline void set_portno(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:edu.princeton.jetstream.NodeID)
 private:
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_portno();
  inline void clear_has_portno();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* address_;
  ::google::protobuf::int32 portno_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_jetstream_5ftypes_2eproto();
  friend void protobuf_AssignDesc_jetstream_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_jetstream_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static NodeID* default_instance_;
};
// -------------------------------------------------------------------

class TaskID : public ::google::protobuf::Message {
 public:
  TaskID();
  virtual ~TaskID();
  
  TaskID(const TaskID& from);
  
  inline TaskID& operator=(const TaskID& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskID& default_instance();
  
  void Swap(TaskID* other);
  
  // implements Message ----------------------------------------------
  
  TaskID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskID& from);
  void MergeFrom(const TaskID& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 computationID = 1;
  inline bool has_computationid() const;
  inline void clear_computationid();
  static const int kComputationIDFieldNumber = 1;
  inline ::google::protobuf::int32 computationid() const;
  inline void set_computationid(::google::protobuf::int32 value);
  
  // required int32 task = 2;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 2;
  inline ::google::protobuf::int32 task() const;
  inline void set_task(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:edu.princeton.jetstream.TaskID)
 private:
  inline void set_has_computationid();
  inline void clear_has_computationid();
  inline void set_has_task();
  inline void clear_has_task();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 computationid_;
  ::google::protobuf::int32 task_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_jetstream_5ftypes_2eproto();
  friend void protobuf_AssignDesc_jetstream_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_jetstream_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static TaskID* default_instance_;
};
// -------------------------------------------------------------------

class TaskMeta : public ::google::protobuf::Message {
 public:
  TaskMeta();
  virtual ~TaskMeta();
  
  TaskMeta(const TaskMeta& from);
  
  inline TaskMeta& operator=(const TaskMeta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskMeta& default_instance();
  
  void Swap(TaskMeta* other);
  
  // implements Message ----------------------------------------------
  
  TaskMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskMeta& from);
  void MergeFrom(const TaskMeta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline const ::std::string& cmd() const;
  inline void set_cmd(const ::std::string& value);
  inline void set_cmd(const char* value);
  inline void set_cmd(const char* value, size_t size);
  inline ::std::string* mutable_cmd();
  inline ::std::string* release_cmd();
  
  // required .edu.princeton.jetstream.TaskID id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::edu::princeton::jetstream::TaskID& id() const;
  inline ::edu::princeton::jetstream::TaskID* mutable_id();
  inline ::edu::princeton::jetstream::TaskID* release_id();
  
  // optional .edu.princeton.jetstream.NodeID site = 3;
  inline bool has_site() const;
  inline void clear_site();
  static const int kSiteFieldNumber = 3;
  inline const ::edu::princeton::jetstream::NodeID& site() const;
  inline ::edu::princeton::jetstream::NodeID* mutable_site();
  inline ::edu::princeton::jetstream::NodeID* release_site();
  
  // @@protoc_insertion_point(class_scope:edu.princeton.jetstream.TaskMeta)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_site();
  inline void clear_has_site();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* cmd_;
  ::edu::princeton::jetstream::TaskID* id_;
  ::edu::princeton::jetstream::NodeID* site_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_jetstream_5ftypes_2eproto();
  friend void protobuf_AssignDesc_jetstream_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_jetstream_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static TaskMeta* default_instance_;
};
// -------------------------------------------------------------------

class TableName : public ::google::protobuf::Message {
 public:
  TableName();
  virtual ~TableName();
  
  TableName(const TableName& from);
  
  inline TableName& operator=(const TableName& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableName& default_instance();
  
  void Swap(TableName* other);
  
  // implements Message ----------------------------------------------
  
  TableName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableName& from);
  void MergeFrom(const TableName& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:edu.princeton.jetstream.TableName)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_jetstream_5ftypes_2eproto();
  friend void protobuf_AssignDesc_jetstream_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_jetstream_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static TableName* default_instance_;
};
// -------------------------------------------------------------------

class TableMeta : public ::google::protobuf::Message {
 public:
  TableMeta();
  virtual ~TableMeta();
  
  TableMeta(const TableMeta& from);
  
  inline TableMeta& operator=(const TableMeta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableMeta& default_instance();
  
  void Swap(TableMeta* other);
  
  // implements Message ----------------------------------------------
  
  TableMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableMeta& from);
  void MergeFrom(const TableMeta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .edu.princeton.jetstream.TableName name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::edu::princeton::jetstream::TableName& name() const;
  inline ::edu::princeton::jetstream::TableName* mutable_name();
  inline ::edu::princeton::jetstream::TableName* release_name();
  
  // required string schema = 2;
  inline bool has_schema() const;
  inline void clear_schema();
  static const int kSchemaFieldNumber = 2;
  inline const ::std::string& schema() const;
  inline void set_schema(const ::std::string& value);
  inline void set_schema(const char* value);
  inline void set_schema(const char* value, size_t size);
  inline ::std::string* mutable_schema();
  inline ::std::string* release_schema();
  
  // optional .edu.princeton.jetstream.NodeID site = 3;
  inline bool has_site() const;
  inline void clear_site();
  static const int kSiteFieldNumber = 3;
  inline const ::edu::princeton::jetstream::NodeID& site() const;
  inline ::edu::princeton::jetstream::NodeID* mutable_site();
  inline ::edu::princeton::jetstream::NodeID* release_site();
  
  // @@protoc_insertion_point(class_scope:edu.princeton.jetstream.TableMeta)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_schema();
  inline void clear_has_schema();
  inline void set_has_site();
  inline void clear_has_site();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::edu::princeton::jetstream::TableName* name_;
  ::std::string* schema_;
  ::edu::princeton::jetstream::NodeID* site_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_jetstream_5ftypes_2eproto();
  friend void protobuf_AssignDesc_jetstream_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_jetstream_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static TableMeta* default_instance_;
};
// -------------------------------------------------------------------

class Edge : public ::google::protobuf::Message {
 public:
  Edge();
  virtual ~Edge();
  
  Edge(const Edge& from);
  
  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Edge& default_instance();
  
  void Swap(Edge* other);
  
  // implements Message ----------------------------------------------
  
  Edge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline ::google::protobuf::int32 src() const;
  inline void set_src(::google::protobuf::int32 value);
  
  // required int32 dest = 2;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 2;
  inline ::google::protobuf::int32 dest() const;
  inline void set_dest(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:edu.princeton.jetstream.Edge)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dest();
  inline void clear_has_dest();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 src_;
  ::google::protobuf::int32 dest_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_jetstream_5ftypes_2eproto();
  friend void protobuf_AssignDesc_jetstream_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_jetstream_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static Edge* default_instance_;
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message {
 public:
  Table();
  virtual ~Table();
  
  Table(const Table& from);
  
  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();
  
  void Swap(Table* other);
  
  // implements Message ----------------------------------------------
  
  Table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Table_Type Type;
  static const Type BYTES = Table_Type_BYTES;
  static const Type STRING = Table_Type_STRING;
  static const Type INT32 = Table_Type_INT32;
  static inline bool Type_IsValid(int value) {
    return Table_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Table_Type_Type_MIN;
  static const Type Type_MAX =
    Table_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Table_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Table_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Table_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Table_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .edu.princeton.jetstream.Table.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::edu::princeton::jetstream::Table_Type type() const;
  inline void set_type(::edu::princeton::jetstream::Table_Type value);
  
  // optional .edu.princeton.jetstream.TableMeta meta = 2;
  inline bool has_meta() const;
  inline void clear_meta();
  static const int kMetaFieldNumber = 2;
  inline const ::edu::princeton::jetstream::TableMeta& meta() const;
  inline ::edu::princeton::jetstream::TableMeta* mutable_meta();
  inline ::edu::princeton::jetstream::TableMeta* release_meta();
  
  // repeated bytes bytesData = 3;
  inline int bytesdata_size() const;
  inline void clear_bytesdata();
  static const int kBytesDataFieldNumber = 3;
  inline const ::std::string& bytesdata(int index) const;
  inline ::std::string* mutable_bytesdata(int index);
  inline void set_bytesdata(int index, const ::std::string& value);
  inline void set_bytesdata(int index, const char* value);
  inline void set_bytesdata(int index, const void* value, size_t size);
  inline ::std::string* add_bytesdata();
  inline void add_bytesdata(const ::std::string& value);
  inline void add_bytesdata(const char* value);
  inline void add_bytesdata(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bytesdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bytesdata();
  
  // repeated string stringData = 4;
  inline int stringdata_size() const;
  inline void clear_stringdata();
  static const int kStringDataFieldNumber = 4;
  inline const ::std::string& stringdata(int index) const;
  inline ::std::string* mutable_stringdata(int index);
  inline void set_stringdata(int index, const ::std::string& value);
  inline void set_stringdata(int index, const char* value);
  inline void set_stringdata(int index, const char* value, size_t size);
  inline ::std::string* add_stringdata();
  inline void add_stringdata(const ::std::string& value);
  inline void add_stringdata(const char* value);
  inline void add_stringdata(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stringdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stringdata();
  
  // repeated int32 int32Data = 5 [packed = true];
  inline int int32data_size() const;
  inline void clear_int32data();
  static const int kInt32DataFieldNumber = 5;
  inline ::google::protobuf::int32 int32data(int index) const;
  inline void set_int32data(int index, ::google::protobuf::int32 value);
  inline void add_int32data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int32data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int32data();
  
  // @@protoc_insertion_point(class_scope:edu.princeton.jetstream.Table)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_meta();
  inline void clear_has_meta();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::edu::princeton::jetstream::TableMeta* meta_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bytesdata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stringdata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int32data_;
  mutable int _int32data_cached_byte_size_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_jetstream_5ftypes_2eproto();
  friend void protobuf_AssignDesc_jetstream_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_jetstream_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static Table* default_instance_;
};
// -------------------------------------------------------------------

class Cube : public ::google::protobuf::Message {
 public:
  Cube();
  virtual ~Cube();
  
  Cube(const Cube& from);
  
  inline Cube& operator=(const Cube& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Cube& default_instance();
  
  void Swap(Cube* other);
  
  // implements Message ----------------------------------------------
  
  Cube* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cube& from);
  void MergeFrom(const Cube& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .edu.princeton.jetstream.Table tables = 1;
  inline int tables_size() const;
  inline void clear_tables();
  static const int kTablesFieldNumber = 1;
  inline const ::edu::princeton::jetstream::Table& tables(int index) const;
  inline ::edu::princeton::jetstream::Table* mutable_tables(int index);
  inline ::edu::princeton::jetstream::Table* add_tables();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::Table >&
      tables() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::Table >*
      mutable_tables();
  
  // @@protoc_insertion_point(class_scope:edu.princeton.jetstream.Cube)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::Table > tables_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_jetstream_5ftypes_2eproto();
  friend void protobuf_AssignDesc_jetstream_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_jetstream_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static Cube* default_instance_;
};
// ===================================================================


// ===================================================================

// NodeID

// required bytes address = 1;
inline bool NodeID::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeID::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeID::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeID::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& NodeID::address() const {
  return *address_;
}
inline void NodeID::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void NodeID::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void NodeID::set_address(const void* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeID::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* NodeID::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 portno = 2;
inline bool NodeID::has_portno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeID::set_has_portno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeID::clear_has_portno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeID::clear_portno() {
  portno_ = 0;
  clear_has_portno();
}
inline ::google::protobuf::int32 NodeID::portno() const {
  return portno_;
}
inline void NodeID::set_portno(::google::protobuf::int32 value) {
  set_has_portno();
  portno_ = value;
}

// -------------------------------------------------------------------

// TaskID

// required int32 computationID = 1;
inline bool TaskID::has_computationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskID::set_has_computationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskID::clear_has_computationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskID::clear_computationid() {
  computationid_ = 0;
  clear_has_computationid();
}
inline ::google::protobuf::int32 TaskID::computationid() const {
  return computationid_;
}
inline void TaskID::set_computationid(::google::protobuf::int32 value) {
  set_has_computationid();
  computationid_ = value;
}

// required int32 task = 2;
inline bool TaskID::has_task() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskID::set_has_task() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskID::clear_has_task() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskID::clear_task() {
  task_ = 0;
  clear_has_task();
}
inline ::google::protobuf::int32 TaskID::task() const {
  return task_;
}
inline void TaskID::set_task(::google::protobuf::int32 value) {
  set_has_task();
  task_ = value;
}

// -------------------------------------------------------------------

// TaskMeta

// required string cmd = 1;
inline bool TaskMeta::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskMeta::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskMeta::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskMeta::clear_cmd() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    cmd_->clear();
  }
  clear_has_cmd();
}
inline const ::std::string& TaskMeta::cmd() const {
  return *cmd_;
}
inline void TaskMeta::set_cmd(const ::std::string& value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void TaskMeta::set_cmd(const char* value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void TaskMeta::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskMeta::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  return cmd_;
}
inline ::std::string* TaskMeta::release_cmd() {
  clear_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cmd_;
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .edu.princeton.jetstream.TaskID id = 2;
inline bool TaskMeta::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskMeta::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskMeta::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskMeta::clear_id() {
  if (id_ != NULL) id_->::edu::princeton::jetstream::TaskID::Clear();
  clear_has_id();
}
inline const ::edu::princeton::jetstream::TaskID& TaskMeta::id() const {
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::edu::princeton::jetstream::TaskID* TaskMeta::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::edu::princeton::jetstream::TaskID;
  return id_;
}
inline ::edu::princeton::jetstream::TaskID* TaskMeta::release_id() {
  clear_has_id();
  ::edu::princeton::jetstream::TaskID* temp = id_;
  id_ = NULL;
  return temp;
}

// optional .edu.princeton.jetstream.NodeID site = 3;
inline bool TaskMeta::has_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskMeta::set_has_site() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskMeta::clear_has_site() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskMeta::clear_site() {
  if (site_ != NULL) site_->::edu::princeton::jetstream::NodeID::Clear();
  clear_has_site();
}
inline const ::edu::princeton::jetstream::NodeID& TaskMeta::site() const {
  return site_ != NULL ? *site_ : *default_instance_->site_;
}
inline ::edu::princeton::jetstream::NodeID* TaskMeta::mutable_site() {
  set_has_site();
  if (site_ == NULL) site_ = new ::edu::princeton::jetstream::NodeID;
  return site_;
}
inline ::edu::princeton::jetstream::NodeID* TaskMeta::release_site() {
  clear_has_site();
  ::edu::princeton::jetstream::NodeID* temp = site_;
  site_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// TableName

// required string name = 1;
inline bool TableName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TableName::name() const {
  return *name_;
}
inline void TableName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TableName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TableName::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TableName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TableName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 id = 2;
inline bool TableName::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableName::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableName::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableName::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TableName::id() const {
  return id_;
}
inline void TableName::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// TableMeta

// required .edu.princeton.jetstream.TableName name = 1;
inline bool TableMeta::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableMeta::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableMeta::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableMeta::clear_name() {
  if (name_ != NULL) name_->::edu::princeton::jetstream::TableName::Clear();
  clear_has_name();
}
inline const ::edu::princeton::jetstream::TableName& TableMeta::name() const {
  return name_ != NULL ? *name_ : *default_instance_->name_;
}
inline ::edu::princeton::jetstream::TableName* TableMeta::mutable_name() {
  set_has_name();
  if (name_ == NULL) name_ = new ::edu::princeton::jetstream::TableName;
  return name_;
}
inline ::edu::princeton::jetstream::TableName* TableMeta::release_name() {
  clear_has_name();
  ::edu::princeton::jetstream::TableName* temp = name_;
  name_ = NULL;
  return temp;
}

// required string schema = 2;
inline bool TableMeta::has_schema() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableMeta::set_has_schema() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableMeta::clear_has_schema() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableMeta::clear_schema() {
  if (schema_ != &::google::protobuf::internal::kEmptyString) {
    schema_->clear();
  }
  clear_has_schema();
}
inline const ::std::string& TableMeta::schema() const {
  return *schema_;
}
inline void TableMeta::set_schema(const ::std::string& value) {
  set_has_schema();
  if (schema_ == &::google::protobuf::internal::kEmptyString) {
    schema_ = new ::std::string;
  }
  schema_->assign(value);
}
inline void TableMeta::set_schema(const char* value) {
  set_has_schema();
  if (schema_ == &::google::protobuf::internal::kEmptyString) {
    schema_ = new ::std::string;
  }
  schema_->assign(value);
}
inline void TableMeta::set_schema(const char* value, size_t size) {
  set_has_schema();
  if (schema_ == &::google::protobuf::internal::kEmptyString) {
    schema_ = new ::std::string;
  }
  schema_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TableMeta::mutable_schema() {
  set_has_schema();
  if (schema_ == &::google::protobuf::internal::kEmptyString) {
    schema_ = new ::std::string;
  }
  return schema_;
}
inline ::std::string* TableMeta::release_schema() {
  clear_has_schema();
  if (schema_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = schema_;
    schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .edu.princeton.jetstream.NodeID site = 3;
inline bool TableMeta::has_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TableMeta::set_has_site() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TableMeta::clear_has_site() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TableMeta::clear_site() {
  if (site_ != NULL) site_->::edu::princeton::jetstream::NodeID::Clear();
  clear_has_site();
}
inline const ::edu::princeton::jetstream::NodeID& TableMeta::site() const {
  return site_ != NULL ? *site_ : *default_instance_->site_;
}
inline ::edu::princeton::jetstream::NodeID* TableMeta::mutable_site() {
  set_has_site();
  if (site_ == NULL) site_ = new ::edu::princeton::jetstream::NodeID;
  return site_;
}
inline ::edu::princeton::jetstream::NodeID* TableMeta::release_site() {
  clear_has_site();
  ::edu::princeton::jetstream::NodeID* temp = site_;
  site_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Edge

// required int32 src = 1;
inline bool Edge::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Edge::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Edge::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Edge::clear_src() {
  src_ = 0;
  clear_has_src();
}
inline ::google::protobuf::int32 Edge::src() const {
  return src_;
}
inline void Edge::set_src(::google::protobuf::int32 value) {
  set_has_src();
  src_ = value;
}

// required int32 dest = 2;
inline bool Edge::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Edge::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Edge::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Edge::clear_dest() {
  dest_ = 0;
  clear_has_dest();
}
inline ::google::protobuf::int32 Edge::dest() const {
  return dest_;
}
inline void Edge::set_dest(::google::protobuf::int32 value) {
  set_has_dest();
  dest_ = value;
}

// -------------------------------------------------------------------

// Table

// required .edu.princeton.jetstream.Table.Type type = 1;
inline bool Table::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Table::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Table::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Table::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::edu::princeton::jetstream::Table_Type Table::type() const {
  return static_cast< ::edu::princeton::jetstream::Table_Type >(type_);
}
inline void Table::set_type(::edu::princeton::jetstream::Table_Type value) {
  GOOGLE_DCHECK(::edu::princeton::jetstream::Table_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .edu.princeton.jetstream.TableMeta meta = 2;
inline bool Table::has_meta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Table::set_has_meta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Table::clear_has_meta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Table::clear_meta() {
  if (meta_ != NULL) meta_->::edu::princeton::jetstream::TableMeta::Clear();
  clear_has_meta();
}
inline const ::edu::princeton::jetstream::TableMeta& Table::meta() const {
  return meta_ != NULL ? *meta_ : *default_instance_->meta_;
}
inline ::edu::princeton::jetstream::TableMeta* Table::mutable_meta() {
  set_has_meta();
  if (meta_ == NULL) meta_ = new ::edu::princeton::jetstream::TableMeta;
  return meta_;
}
inline ::edu::princeton::jetstream::TableMeta* Table::release_meta() {
  clear_has_meta();
  ::edu::princeton::jetstream::TableMeta* temp = meta_;
  meta_ = NULL;
  return temp;
}

// repeated bytes bytesData = 3;
inline int Table::bytesdata_size() const {
  return bytesdata_.size();
}
inline void Table::clear_bytesdata() {
  bytesdata_.Clear();
}
inline const ::std::string& Table::bytesdata(int index) const {
  return bytesdata_.Get(index);
}
inline ::std::string* Table::mutable_bytesdata(int index) {
  return bytesdata_.Mutable(index);
}
inline void Table::set_bytesdata(int index, const ::std::string& value) {
  bytesdata_.Mutable(index)->assign(value);
}
inline void Table::set_bytesdata(int index, const char* value) {
  bytesdata_.Mutable(index)->assign(value);
}
inline void Table::set_bytesdata(int index, const void* value, size_t size) {
  bytesdata_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Table::add_bytesdata() {
  return bytesdata_.Add();
}
inline void Table::add_bytesdata(const ::std::string& value) {
  bytesdata_.Add()->assign(value);
}
inline void Table::add_bytesdata(const char* value) {
  bytesdata_.Add()->assign(value);
}
inline void Table::add_bytesdata(const void* value, size_t size) {
  bytesdata_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Table::bytesdata() const {
  return bytesdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Table::mutable_bytesdata() {
  return &bytesdata_;
}

// repeated string stringData = 4;
inline int Table::stringdata_size() const {
  return stringdata_.size();
}
inline void Table::clear_stringdata() {
  stringdata_.Clear();
}
inline const ::std::string& Table::stringdata(int index) const {
  return stringdata_.Get(index);
}
inline ::std::string* Table::mutable_stringdata(int index) {
  return stringdata_.Mutable(index);
}
inline void Table::set_stringdata(int index, const ::std::string& value) {
  stringdata_.Mutable(index)->assign(value);
}
inline void Table::set_stringdata(int index, const char* value) {
  stringdata_.Mutable(index)->assign(value);
}
inline void Table::set_stringdata(int index, const char* value, size_t size) {
  stringdata_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Table::add_stringdata() {
  return stringdata_.Add();
}
inline void Table::add_stringdata(const ::std::string& value) {
  stringdata_.Add()->assign(value);
}
inline void Table::add_stringdata(const char* value) {
  stringdata_.Add()->assign(value);
}
inline void Table::add_stringdata(const char* value, size_t size) {
  stringdata_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Table::stringdata() const {
  return stringdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Table::mutable_stringdata() {
  return &stringdata_;
}

// repeated int32 int32Data = 5 [packed = true];
inline int Table::int32data_size() const {
  return int32data_.size();
}
inline void Table::clear_int32data() {
  int32data_.Clear();
}
inline ::google::protobuf::int32 Table::int32data(int index) const {
  return int32data_.Get(index);
}
inline void Table::set_int32data(int index, ::google::protobuf::int32 value) {
  int32data_.Set(index, value);
}
inline void Table::add_int32data(::google::protobuf::int32 value) {
  int32data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Table::int32data() const {
  return int32data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Table::mutable_int32data() {
  return &int32data_;
}

// -------------------------------------------------------------------

// Cube

// repeated .edu.princeton.jetstream.Table tables = 1;
inline int Cube::tables_size() const {
  return tables_.size();
}
inline void Cube::clear_tables() {
  tables_.Clear();
}
inline const ::edu::princeton::jetstream::Table& Cube::tables(int index) const {
  return tables_.Get(index);
}
inline ::edu::princeton::jetstream::Table* Cube::mutable_tables(int index) {
  return tables_.Mutable(index);
}
inline ::edu::princeton::jetstream::Table* Cube::add_tables() {
  return tables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::Table >&
Cube::tables() const {
  return tables_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::Table >*
Cube::mutable_tables() {
  return &tables_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace jetstream
}  // namespace princeton
}  // namespace edu

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::edu::princeton::jetstream::Table_Type>() {
  return ::edu::princeton::jetstream::Table_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_jetstream_5ftypes_2eproto__INCLUDED
