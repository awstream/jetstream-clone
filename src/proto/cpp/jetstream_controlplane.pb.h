// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jetstream_controlplane.proto

#ifndef PROTOBUF_jetstream_5fcontrolplane_2eproto__INCLUDED
#define PROTOBUF_jetstream_5fcontrolplane_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "jetstream_types.pb.h"
// @@protoc_insertion_point(includes)

namespace edu {
namespace princeton {
namespace jetstream {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_jetstream_5fcontrolplane_2eproto();
void protobuf_AssignDesc_jetstream_5fcontrolplane_2eproto();
void protobuf_ShutdownFile_jetstream_5fcontrolplane_2eproto();

class AlterTopo;
class ServerRequest;
class ServerResponse;

enum ServerRequest_Type {
  ServerRequest_Type_GET_NODES = 1,
  ServerRequest_Type_DEPLOY = 3,
  ServerRequest_Type_COUNT_NODES = 4
};
bool ServerRequest_Type_IsValid(int value);
const ServerRequest_Type ServerRequest_Type_Type_MIN = ServerRequest_Type_GET_NODES;
const ServerRequest_Type ServerRequest_Type_Type_MAX = ServerRequest_Type_COUNT_NODES;
const int ServerRequest_Type_Type_ARRAYSIZE = ServerRequest_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerRequest_Type_descriptor();
inline const ::std::string& ServerRequest_Type_Name(ServerRequest_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerRequest_Type_descriptor(), value);
}
inline bool ServerRequest_Type_Parse(
    const ::std::string& name, ServerRequest_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerRequest_Type>(
    ServerRequest_Type_descriptor(), name, value);
}
// ===================================================================

class AlterTopo : public ::google::protobuf::Message {
 public:
  AlterTopo();
  virtual ~AlterTopo();
  
  AlterTopo(const AlterTopo& from);
  
  inline AlterTopo& operator=(const AlterTopo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlterTopo& default_instance();
  
  void Swap(AlterTopo* other);
  
  // implements Message ----------------------------------------------
  
  AlterTopo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlterTopo& from);
  void MergeFrom(const AlterTopo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .edu.princeton.jetstream.TaskMeta toStart = 1;
  inline int tostart_size() const;
  inline void clear_tostart();
  static const int kToStartFieldNumber = 1;
  inline const ::edu::princeton::jetstream::TaskMeta& tostart(int index) const;
  inline ::edu::princeton::jetstream::TaskMeta* mutable_tostart(int index);
  inline ::edu::princeton::jetstream::TaskMeta* add_tostart();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::TaskMeta >&
      tostart() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::TaskMeta >*
      mutable_tostart();
  
  // repeated .edu.princeton.jetstream.TableMeta toCreate = 2;
  inline int tocreate_size() const;
  inline void clear_tocreate();
  static const int kToCreateFieldNumber = 2;
  inline const ::edu::princeton::jetstream::TableMeta& tocreate(int index) const;
  inline ::edu::princeton::jetstream::TableMeta* mutable_tocreate(int index);
  inline ::edu::princeton::jetstream::TableMeta* add_tocreate();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::TableMeta >&
      tocreate() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::TableMeta >*
      mutable_tocreate();
  
  // repeated .edu.princeton.jetstream.TaskID taskToStop = 3;
  inline int tasktostop_size() const;
  inline void clear_tasktostop();
  static const int kTaskToStopFieldNumber = 3;
  inline const ::edu::princeton::jetstream::TaskID& tasktostop(int index) const;
  inline ::edu::princeton::jetstream::TaskID* mutable_tasktostop(int index);
  inline ::edu::princeton::jetstream::TaskID* add_tasktostop();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::TaskID >&
      tasktostop() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::TaskID >*
      mutable_tasktostop();
  
  // repeated string tableToStop = 4;
  inline int tabletostop_size() const;
  inline void clear_tabletostop();
  static const int kTableToStopFieldNumber = 4;
  inline const ::std::string& tabletostop(int index) const;
  inline ::std::string* mutable_tabletostop(int index);
  inline void set_tabletostop(int index, const ::std::string& value);
  inline void set_tabletostop(int index, const char* value);
  inline void set_tabletostop(int index, const char* value, size_t size);
  inline ::std::string* add_tabletostop();
  inline void add_tabletostop(const ::std::string& value);
  inline void add_tabletostop(const char* value);
  inline void add_tabletostop(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tabletostop() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tabletostop();
  
  // repeated .edu.princeton.jetstream.Edge edges = 5;
  inline int edges_size() const;
  inline void clear_edges();
  static const int kEdgesFieldNumber = 5;
  inline const ::edu::princeton::jetstream::Edge& edges(int index) const;
  inline ::edu::princeton::jetstream::Edge* mutable_edges(int index);
  inline ::edu::princeton::jetstream::Edge* add_edges();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::Edge >&
      edges() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::Edge >*
      mutable_edges();
  
  // @@protoc_insertion_point(class_scope:edu.princeton.jetstream.AlterTopo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::TaskMeta > tostart_;
  ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::TableMeta > tocreate_;
  ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::TaskID > tasktostop_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tabletostop_;
  ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::Edge > edges_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_jetstream_5fcontrolplane_2eproto();
  friend void protobuf_AssignDesc_jetstream_5fcontrolplane_2eproto();
  friend void protobuf_ShutdownFile_jetstream_5fcontrolplane_2eproto();
  
  void InitAsDefaultInstance();
  static AlterTopo* default_instance_;
};
// -------------------------------------------------------------------

class ServerRequest : public ::google::protobuf::Message {
 public:
  ServerRequest();
  virtual ~ServerRequest();
  
  ServerRequest(const ServerRequest& from);
  
  inline ServerRequest& operator=(const ServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerRequest& default_instance();
  
  void Swap(ServerRequest* other);
  
  // implements Message ----------------------------------------------
  
  ServerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerRequest& from);
  void MergeFrom(const ServerRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ServerRequest_Type Type;
  static const Type GET_NODES = ServerRequest_Type_GET_NODES;
  static const Type DEPLOY = ServerRequest_Type_DEPLOY;
  static const Type COUNT_NODES = ServerRequest_Type_COUNT_NODES;
  static inline bool Type_IsValid(int value) {
    return ServerRequest_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ServerRequest_Type_Type_MIN;
  static const Type Type_MAX =
    ServerRequest_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ServerRequest_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ServerRequest_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ServerRequest_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ServerRequest_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .edu.princeton.jetstream.ServerRequest.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::edu::princeton::jetstream::ServerRequest_Type type() const;
  inline void set_type(::edu::princeton::jetstream::ServerRequest_Type value);
  
  // optional .edu.princeton.jetstream.AlterTopo alter = 3;
  inline bool has_alter() const;
  inline void clear_alter();
  static const int kAlterFieldNumber = 3;
  inline const ::edu::princeton::jetstream::AlterTopo& alter() const;
  inline ::edu::princeton::jetstream::AlterTopo* mutable_alter();
  inline ::edu::princeton::jetstream::AlterTopo* release_alter();
  
  // @@protoc_insertion_point(class_scope:edu.princeton.jetstream.ServerRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_alter();
  inline void clear_has_alter();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::edu::princeton::jetstream::AlterTopo* alter_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_jetstream_5fcontrolplane_2eproto();
  friend void protobuf_AssignDesc_jetstream_5fcontrolplane_2eproto();
  friend void protobuf_ShutdownFile_jetstream_5fcontrolplane_2eproto();
  
  void InitAsDefaultInstance();
  static ServerRequest* default_instance_;
};
// -------------------------------------------------------------------

class ServerResponse : public ::google::protobuf::Message {
 public:
  ServerResponse();
  virtual ~ServerResponse();
  
  ServerResponse(const ServerResponse& from);
  
  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerResponse& default_instance();
  
  void Swap(ServerResponse* other);
  
  // implements Message ----------------------------------------------
  
  ServerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerResponse& from);
  void MergeFrom(const ServerResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string error = 147;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 147;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  
  // repeated .edu.princeton.jetstream.NodeID nodes = 148;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 148;
  inline const ::edu::princeton::jetstream::NodeID& nodes(int index) const;
  inline ::edu::princeton::jetstream::NodeID* mutable_nodes(int index);
  inline ::edu::princeton::jetstream::NodeID* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::NodeID >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::NodeID >*
      mutable_nodes();
  
  // optional int32 count_nodes = 149;
  inline bool has_count_nodes() const;
  inline void clear_count_nodes();
  static const int kCountNodesFieldNumber = 149;
  inline ::google::protobuf::int32 count_nodes() const;
  inline void set_count_nodes(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:edu.princeton.jetstream.ServerResponse)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_count_nodes();
  inline void clear_has_count_nodes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* error_;
  ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::NodeID > nodes_;
  ::google::protobuf::int32 count_nodes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_jetstream_5fcontrolplane_2eproto();
  friend void protobuf_AssignDesc_jetstream_5fcontrolplane_2eproto();
  friend void protobuf_ShutdownFile_jetstream_5fcontrolplane_2eproto();
  
  void InitAsDefaultInstance();
  static ServerResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// AlterTopo

// repeated .edu.princeton.jetstream.TaskMeta toStart = 1;
inline int AlterTopo::tostart_size() const {
  return tostart_.size();
}
inline void AlterTopo::clear_tostart() {
  tostart_.Clear();
}
inline const ::edu::princeton::jetstream::TaskMeta& AlterTopo::tostart(int index) const {
  return tostart_.Get(index);
}
inline ::edu::princeton::jetstream::TaskMeta* AlterTopo::mutable_tostart(int index) {
  return tostart_.Mutable(index);
}
inline ::edu::princeton::jetstream::TaskMeta* AlterTopo::add_tostart() {
  return tostart_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::TaskMeta >&
AlterTopo::tostart() const {
  return tostart_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::TaskMeta >*
AlterTopo::mutable_tostart() {
  return &tostart_;
}

// repeated .edu.princeton.jetstream.TableMeta toCreate = 2;
inline int AlterTopo::tocreate_size() const {
  return tocreate_.size();
}
inline void AlterTopo::clear_tocreate() {
  tocreate_.Clear();
}
inline const ::edu::princeton::jetstream::TableMeta& AlterTopo::tocreate(int index) const {
  return tocreate_.Get(index);
}
inline ::edu::princeton::jetstream::TableMeta* AlterTopo::mutable_tocreate(int index) {
  return tocreate_.Mutable(index);
}
inline ::edu::princeton::jetstream::TableMeta* AlterTopo::add_tocreate() {
  return tocreate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::TableMeta >&
AlterTopo::tocreate() const {
  return tocreate_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::TableMeta >*
AlterTopo::mutable_tocreate() {
  return &tocreate_;
}

// repeated .edu.princeton.jetstream.TaskID taskToStop = 3;
inline int AlterTopo::tasktostop_size() const {
  return tasktostop_.size();
}
inline void AlterTopo::clear_tasktostop() {
  tasktostop_.Clear();
}
inline const ::edu::princeton::jetstream::TaskID& AlterTopo::tasktostop(int index) const {
  return tasktostop_.Get(index);
}
inline ::edu::princeton::jetstream::TaskID* AlterTopo::mutable_tasktostop(int index) {
  return tasktostop_.Mutable(index);
}
inline ::edu::princeton::jetstream::TaskID* AlterTopo::add_tasktostop() {
  return tasktostop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::TaskID >&
AlterTopo::tasktostop() const {
  return tasktostop_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::TaskID >*
AlterTopo::mutable_tasktostop() {
  return &tasktostop_;
}

// repeated string tableToStop = 4;
inline int AlterTopo::tabletostop_size() const {
  return tabletostop_.size();
}
inline void AlterTopo::clear_tabletostop() {
  tabletostop_.Clear();
}
inline const ::std::string& AlterTopo::tabletostop(int index) const {
  return tabletostop_.Get(index);
}
inline ::std::string* AlterTopo::mutable_tabletostop(int index) {
  return tabletostop_.Mutable(index);
}
inline void AlterTopo::set_tabletostop(int index, const ::std::string& value) {
  tabletostop_.Mutable(index)->assign(value);
}
inline void AlterTopo::set_tabletostop(int index, const char* value) {
  tabletostop_.Mutable(index)->assign(value);
}
inline void AlterTopo::set_tabletostop(int index, const char* value, size_t size) {
  tabletostop_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AlterTopo::add_tabletostop() {
  return tabletostop_.Add();
}
inline void AlterTopo::add_tabletostop(const ::std::string& value) {
  tabletostop_.Add()->assign(value);
}
inline void AlterTopo::add_tabletostop(const char* value) {
  tabletostop_.Add()->assign(value);
}
inline void AlterTopo::add_tabletostop(const char* value, size_t size) {
  tabletostop_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AlterTopo::tabletostop() const {
  return tabletostop_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AlterTopo::mutable_tabletostop() {
  return &tabletostop_;
}

// repeated .edu.princeton.jetstream.Edge edges = 5;
inline int AlterTopo::edges_size() const {
  return edges_.size();
}
inline void AlterTopo::clear_edges() {
  edges_.Clear();
}
inline const ::edu::princeton::jetstream::Edge& AlterTopo::edges(int index) const {
  return edges_.Get(index);
}
inline ::edu::princeton::jetstream::Edge* AlterTopo::mutable_edges(int index) {
  return edges_.Mutable(index);
}
inline ::edu::princeton::jetstream::Edge* AlterTopo::add_edges() {
  return edges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::Edge >&
AlterTopo::edges() const {
  return edges_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::Edge >*
AlterTopo::mutable_edges() {
  return &edges_;
}

// -------------------------------------------------------------------

// ServerRequest

// required .edu.princeton.jetstream.ServerRequest.Type type = 1;
inline bool ServerRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::edu::princeton::jetstream::ServerRequest_Type ServerRequest::type() const {
  return static_cast< ::edu::princeton::jetstream::ServerRequest_Type >(type_);
}
inline void ServerRequest::set_type(::edu::princeton::jetstream::ServerRequest_Type value) {
  GOOGLE_DCHECK(::edu::princeton::jetstream::ServerRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .edu.princeton.jetstream.AlterTopo alter = 3;
inline bool ServerRequest::has_alter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerRequest::set_has_alter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerRequest::clear_has_alter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerRequest::clear_alter() {
  if (alter_ != NULL) alter_->::edu::princeton::jetstream::AlterTopo::Clear();
  clear_has_alter();
}
inline const ::edu::princeton::jetstream::AlterTopo& ServerRequest::alter() const {
  return alter_ != NULL ? *alter_ : *default_instance_->alter_;
}
inline ::edu::princeton::jetstream::AlterTopo* ServerRequest::mutable_alter() {
  set_has_alter();
  if (alter_ == NULL) alter_ = new ::edu::princeton::jetstream::AlterTopo;
  return alter_;
}
inline ::edu::princeton::jetstream::AlterTopo* ServerRequest::release_alter() {
  clear_has_alter();
  ::edu::princeton::jetstream::AlterTopo* temp = alter_;
  alter_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ServerResponse

// optional string error = 147;
inline bool ServerResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerResponse::clear_error() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& ServerResponse::error() const {
  return *error_;
}
inline void ServerResponse::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void ServerResponse::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void ServerResponse::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerResponse::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  return error_;
}
inline ::std::string* ServerResponse::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .edu.princeton.jetstream.NodeID nodes = 148;
inline int ServerResponse::nodes_size() const {
  return nodes_.size();
}
inline void ServerResponse::clear_nodes() {
  nodes_.Clear();
}
inline const ::edu::princeton::jetstream::NodeID& ServerResponse::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::edu::princeton::jetstream::NodeID* ServerResponse::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::edu::princeton::jetstream::NodeID* ServerResponse::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::NodeID >&
ServerResponse::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::princeton::jetstream::NodeID >*
ServerResponse::mutable_nodes() {
  return &nodes_;
}

// optional int32 count_nodes = 149;
inline bool ServerResponse::has_count_nodes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerResponse::set_has_count_nodes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerResponse::clear_has_count_nodes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerResponse::clear_count_nodes() {
  count_nodes_ = 0;
  clear_has_count_nodes();
}
inline ::google::protobuf::int32 ServerResponse::count_nodes() const {
  return count_nodes_;
}
inline void ServerResponse::set_count_nodes(::google::protobuf::int32 value) {
  set_has_count_nodes();
  count_nodes_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace jetstream
}  // namespace princeton
}  // namespace edu

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::edu::princeton::jetstream::ServerRequest_Type>() {
  return ::edu::princeton::jetstream::ServerRequest_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_jetstream_5fcontrolplane_2eproto__INCLUDED
