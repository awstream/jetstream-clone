// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "jetstream_dataplane.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace edu {
namespace princeton {
namespace jetstream {

namespace {

const ::google::protobuf::Descriptor* TableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_jetstream_5fdataplane_2eproto() {
  protobuf_AddDesc_jetstream_5fdataplane_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "jetstream_dataplane.proto");
  GOOGLE_CHECK(file != NULL);
  TableRequest_descriptor_ = file->message_type(0);
  static const int TableRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRequest, names_),
  };
  TableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableRequest_descriptor_,
      TableRequest::default_instance_,
      TableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableRequest));
  TableResponse_descriptor_ = file->message_type(1);
  static const int TableResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableResponse, tables_),
  };
  TableResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableResponse_descriptor_,
      TableResponse::default_instance_,
      TableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_jetstream_5fdataplane_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableRequest_descriptor_, &TableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableResponse_descriptor_, &TableResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_jetstream_5fdataplane_2eproto() {
  delete TableRequest::default_instance_;
  delete TableRequest_reflection_;
  delete TableResponse::default_instance_;
  delete TableResponse_reflection_;
}

void protobuf_AddDesc_jetstream_5fdataplane_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::edu::princeton::jetstream::protobuf_AddDesc_jetstream_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031jetstream_dataplane.proto\022\027edu.princet"
    "on.jetstream\032\025jetstream_types.proto\"A\n\014T"
    "ableRequest\0221\n\005names\030\001 \003(\0132\".edu.princet"
    "on.jetstream.TableName\">\n\rTableResponse\022"
    "-\n\006tables\030\001 \002(\0132\035.edu.princeton.jetstrea"
    "m.Cube2i\n\014TableService\022Y\n\010getTable\022%.edu"
    ".princeton.jetstream.TableRequest\032&.edu."
    "princeton.jetstream.TableResponse", 313);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "jetstream_dataplane.proto", &protobuf_RegisterTypes);
  TableRequest::default_instance_ = new TableRequest();
  TableResponse::default_instance_ = new TableResponse();
  TableRequest::default_instance_->InitAsDefaultInstance();
  TableResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_jetstream_5fdataplane_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_jetstream_5fdataplane_2eproto {
  StaticDescriptorInitializer_jetstream_5fdataplane_2eproto() {
    protobuf_AddDesc_jetstream_5fdataplane_2eproto();
  }
} static_descriptor_initializer_jetstream_5fdataplane_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TableRequest::kNamesFieldNumber;
#endif  // !_MSC_VER

TableRequest::TableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableRequest::InitAsDefaultInstance() {
}

TableRequest::TableRequest(const TableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableRequest::~TableRequest() {
  SharedDtor();
}

void TableRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableRequest_descriptor_;
}

const TableRequest& TableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jetstream_5fdataplane_2eproto();  return *default_instance_;
}

TableRequest* TableRequest::default_instance_ = NULL;

TableRequest* TableRequest::New() const {
  return new TableRequest;
}

void TableRequest::Clear() {
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.princeton.jetstream.TableName names = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_names()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.princeton.jetstream.TableName names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->names(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.princeton.jetstream.TableName names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->names(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .edu.princeton.jetstream.TableName names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->names(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableRequest::MergeFrom(const TableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableRequest::CopyFrom(const TableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableRequest::IsInitialized() const {
  
  for (int i = 0; i < names_size(); i++) {
    if (!this->names(i).IsInitialized()) return false;
  }
  return true;
}

void TableRequest::Swap(TableRequest* other) {
  if (other != this) {
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableRequest_descriptor_;
  metadata.reflection = TableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableResponse::kTablesFieldNumber;
#endif  // !_MSC_VER

TableResponse::TableResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableResponse::InitAsDefaultInstance() {
  tables_ = const_cast< ::edu::princeton::jetstream::Cube*>(&::edu::princeton::jetstream::Cube::default_instance());
}

TableResponse::TableResponse(const TableResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableResponse::SharedCtor() {
  _cached_size_ = 0;
  tables_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableResponse::~TableResponse() {
  SharedDtor();
}

void TableResponse::SharedDtor() {
  if (this != default_instance_) {
    delete tables_;
  }
}

void TableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableResponse_descriptor_;
}

const TableResponse& TableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jetstream_5fdataplane_2eproto();  return *default_instance_;
}

TableResponse* TableResponse::default_instance_ = NULL;

TableResponse* TableResponse::New() const {
  return new TableResponse;
}

void TableResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tables()) {
      if (tables_ != NULL) tables_->::edu::princeton::jetstream::Cube::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .edu.princeton.jetstream.Cube tables = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .edu.princeton.jetstream.Cube tables = 1;
  if (has_tables()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tables(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .edu.princeton.jetstream.Cube tables = 1;
  if (has_tables()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tables(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .edu.princeton.jetstream.Cube tables = 1;
    if (has_tables()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tables());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableResponse::MergeFrom(const TableResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tables()) {
      mutable_tables()->::edu::princeton::jetstream::Cube::MergeFrom(from.tables());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableResponse::CopyFrom(const TableResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_tables()) {
    if (!this->tables().IsInitialized()) return false;
  }
  return true;
}

void TableResponse::Swap(TableResponse* other) {
  if (other != this) {
    std::swap(tables_, other->tables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableResponse_descriptor_;
  metadata.reflection = TableResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace jetstream
}  // namespace princeton
}  // namespace edu

// @@protoc_insertion_point(global_scope)
